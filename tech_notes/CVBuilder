1- ResumeOverviewPanel: Work 加筛选按钮，按Target Role 筛选，Title, Company ... 按Time排序
2- WorkPanel: 点击Save, 变成文本呈现，带修改字样；点击修改进入编辑模式
3- JDPanel: Label: 用户随意填写的字段，逗号分隔的字符串，支持筛选




✅ JDPanel → MatcherPanel → ExportCVView
🟩 JDPanel.tsx
🎯 用户行为：
用户填写 Target Role 和 Required Skills，点击 Save
✅ 正确逻辑：仅保存展示用途,保存到 localStorage：
localStorage.setItem('jd_role', role)
localStorage.setItem('jd_skills', skills)
❗ 注意：❌ 不作为“全局筛选依据”
✅ 仅供 MatcherPanelJD.tsx 和 ExportCVView.tsx 显示用途

🟦 MatcherPanel.tsx → MatcherPanelCV.tsx
🎯 用户行为：用户自由点击筛选角色按钮
✅ 正确逻辑：
所有角色来自 localStorage 中的 about / work / project 的 scope 字段
点击任意角色按钮，仅本地更新：
setSelectedRole(role) // ✅ 不写入 localStorage
❗ 注意：❌ 不读取 JDPanel 的 role；❌ 不依赖 JDPanel 设置；✅ 完全是独立、自主筛选；

当用户点击 MatcherPanelCV.tsx 中界面上的某个 Role 按钮时,字符串会被保存到 localStorage，键名为 cv_selected_role,
接着执行了setSelectedRole(role),从本地 localStorage 中读取各模块（about, work, project）中 scope === selectedRole 的内容；
更新页面中显示的内容卡片（About, Work, Project）；并将 About 内容合并进 Basic 信息中一起展示。

🟨 ExportCVView.tsx
🎯 该页面是用户点击 MatcherPanel 区域的 “View in CV Format” 按钮后跳转到的页面，主要用于导出视图渲染，
不承担筛选逻辑，只做“读取并展示”。

✅ 正确逻辑分为两部分：
1. 上方：展示 JDPanel 的内容
显示 localStorage.getItem('jd_role') 和 jd_skills ✅ 只展示，不做任何筛选操作
🔹 数据来源：localStorage.getItem('jd_role'),localStorage.getItem('jd_skills')
🔹 处理逻辑：仅用于展示,不参与筛选，不控制任何模块内容,如果为空就显示 placeholder：如 (empty)
2. 下方：展示 CV 内容
🔹 包含模块：Basic, Education, Awards, Work, Project
🔹 展示逻辑：不再重新筛选（不根据 jd_role 做 scope 匹配）, 而是复用用户刚刚在 MatcherPanelCV.tsx 中点击筛选按钮时，
已经保存在 localStorage 中的 cv_selected_role；
About → 只显示一条 scope === cvRole 的记录；Basic → 注入该 about 的 content 到 Basic 的每一条中；
Work 和 Project → 可为多条，需 .filter() + .sort()；
Education 和 Awards → 全部显示，不依赖 role；
✅ 排序要求🔹 仅 Work 和 Project 需排序：
Work：time 格式通常为 "2023 - 2024" 或 "2022 - 2025",排序方式为 结束年份降序（时间靠后的在上）
Project：time 通常为 "2023",直接按数值降序排序
About → 只显示一条 scope === cvRole 的记录；Basic → 注入该 about 的 content 到 Basic 的每一条中；
Work 和 Project → 可为多条，需 .filter() + .sort()；
Education 和 Awards → 全部显示，不依赖 role；

用户点击 View 按钮（进入导出页面）前：
将当前的 selectedRole（即用户在 matcher 页面选中的角色）手动写入 localStorage 或通过 URL 参数传递；
ExportCVView.tsx 中：
读取这个由 matcher 页面设置的 selectedRole；
用它来筛选 CV 内容；
JD 内容仍然使用 jd_role，但不参与任何筛选逻辑。


✅ 只展示 scope === selectedRole 的条目；
来自 MatcherPanelCV 用户操作所生成的结构（通常存放在 DOM / Ref 中）✅ 与 JD 无关；✅ 只是把之前渲染过的 CV 内容“复用”展示出来；
3- 按时间排序
work- Time 格式一般为 2023 - 2025；project- Time 格式一般为 2023




JDPannel 
✅ JSON Schema 描述（文字形式）
顶层对象类型：Object
表示一个完整的 JD 结构记录，包含以下字段：

1. basic_info（Object）– 基本职位信息
title（String）→ 职位名称（必填）

company（String）→ 公司名称（必填）

type（String）→ 职位归类，如 "Marketing"、"Solution"（可选）

location（String）→ 工作地点（可选）

2. category（String）– 你手动定义的岗位大类
示例："Solution"、"Data"、"Operations"
（必填，用于归档和快速查找）

3. tags（Object）– 标签系统
▸ standard（Object）– 共性标签
required_skills（Array of String）→ 技能列表

fit_score（Number, 0–100）→ 匹配度评分

interest_level（Enum: "High" | "Medium" | "Low"）→ 你对职位的兴趣程度

urgency（Enum: "High" | "Medium" | "Low"）→ 紧迫程度

importance（Enum: "High" | "Medium" | "Low"）→ 该职位的重要性

▸ custom（Object）– 自定义标签
任意数量的键值对

键为 String

值为 String / Number / Array of String

示例：

"timeline": "Short-term"

"mobility": "High"

"region_priority": ["APAC", "North America"]

4. jd_full_text（String）– 原始 JD 粘贴文本
完整未经处理的 JD 内容

可达数千字符，供拆分和对比使用

5. jd_sections（Object）– 拆分段落
intro（String）→ 开头描述或公司介绍

responsibilities（String）→ 岗位职责

requirements（String）→ 任职要求

6. meta（Object）– 系统元数据
created_at（Datetime）→ 创建时间戳

updated_at（Datetime）→ 最近更新时间戳