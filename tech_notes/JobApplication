✅ 当前功能概览
该项目是一个 CV & Cover Letter 自动生成器，通过粘贴 JD、填写简历、勾选内容、匹配分析、最终生成结果，目前已实现以下主要功能：

功能分类	当前状态	说明
🔐 登录限制	✅ 完成	必须登录才能查看或保存数据
🧾 个人信息展示	✅ 完成	包括姓名、邮箱、地点、LinkedIn、作品集
🛠 工作/项目/技能填写	✅ 完成	多项输入区域支持添加、编辑、保存
🧩 筛选用于生成的内容	✅ 完成	可勾选工作 / 项目 / 技能传入后续分析或生成
📋 JD 输入	✅ 完成	支持粘贴纯文本 JD（保存在 Zustand，仅本地）
🧠 匹配度分析	✅ 完成	Rule-based 匹配技能与 JD 的重合度
📥 数据持久化	✅ 完成	保存至 Supabase，用户 ID 与 data 绑定
🗃 数据读取	✅ 完成	登录后自动加载最近一次填写的数据

📁 文件结构讲解（按路径顺序）
src/app/job-application/page.tsx
作用：页面入口。

根据 currentTab 的状态动态切换主视图模块；

包含左侧 SidebarTabs 和右侧主内容区（分为 summary / jd / match / output 等）。

📂 components/
SidebarTabs.tsx
左侧导航栏组件；

支持 tab 切换（“个人信息汇总”、“JD 输入”、“匹配度分析”、“生成结果”）；

当前使用 Zustand 管理 tab 状态。

PersonalInfoSummary.tsx
用于展示个人信息、教育经历、工作经历、项目经历、技能等简历内容；

会调用 loadInputsFromSupabase() 根据用户 ID 加载内容；

若用户未登录则提示“请先登录”。

SummarySelectionPanel.tsx
勾选模块，供用户选择哪些内容用于“匹配度分析”或“最终生成”；

支持勾选：✅ 工作经历 ✅ 项目经历 ✅ 技能；

状态保存在 useJobAppStore.ts 中（通过 selected*Indices 数组表示）；

若三项均为空，会显示提示：“请先填写内容”。

SummaryAndFilterPanel.tsx
包裹 PersonalInfoSummary + SummarySelectionPanel；

作为 "summary" tab 的渲染主组件；

管理加载逻辑和展示逻辑。

ExperienceProjectSection.tsx
负责输入工作经历与项目经历；

提供添加按钮、输入框；

提交保存前需验证登录状态，保存调用 saveInputsToSupabase()。

BasicProfileSection.tsx
（预留/待开发）预计用于管理基本信息、教育经历、奖项；

未来功能入口：“🧑‍💼 个人信息输入”。

JdInputPanel.tsx
输入 Job Description 的区域（textarea）；

使用 useJdInputStore.ts 管理粘贴内容；

不写入数据库，仅保存在浏览器内存中，避免浪费空间。

RuleBasedMatchingPanel.tsx
匹配度分析（当前为规则基础，非大模型）；

从 Zustand 获取：

粘贴的 JD 文本；

当前勾选的技能数组；

算法为关键词匹配，展示匹配得分、已匹配技能、未匹配技能。

📂 store/
useJobAppStore.ts
管理页面 tab 状态（如 summary / jd / match / output）；

管理勾选状态（selectedWorkIndices / selectedProjectIndices / selectedSkillIndices）。

useJobAppInputStore.ts
管理用户输入的全部简历数据，包括：

basic, education, workExperience, projects, awards, skills；

包含添加、编辑、删除、设置等函数；

✅ 新增 getSelectedData() 函数 → 提取勾选后的数据内容，用于传参生成逻辑。

useJdInputStore.ts
管理 textarea 粘贴的 JD 内容；

保存在 Zustand，不与数据库交互。

📂 utils/
saveInputsToSupabase.ts
将当前用户的完整数据结构（from useJobAppInputStore）上传到 Supabase；

传入参数为 user_id 和可选标记字符串。

loadInputsFromSupabase.ts
查询当前用户最近一次数据记录并回填到 useJobAppInputStore；

若未找到记录，则跳过加载。

buildInputsJSON.ts
（目前暂未使用）；

后续用于整理所选数据结构，以用于大模型或生成结果。

✅ 已完成的关键技术点
类别	实现情况
状态管理	全面使用 Zustand 管理页面逻辑和输入数据
Supabase	实现匿名登录限制、数据存储、用户数据读取
多组件协作	模块高度解耦，职责清晰，利于维护和扩展
条件显示	多处处理“无数据 → 提示填入”的情况
匹配分析	实现基于关键词匹配的得分算法
本地存储优化	JD 文本仅本地保存，避免数据库垃圾数据

如你希望继续：

✨ 开始设计“生成结果”模块；

🤖 引入大模型做分析生成；