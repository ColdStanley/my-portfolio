# English Reading Module - Technical Documentation

## Overview
The English Reading module is an interactive AI-powered language learning tool that helps users analyze and understand English texts through intelligent word and sentence explanations. It provides a comprehensive reading assistance platform with persistent session management and dual-mode text analysis.

## Core Features

### Reading & Analysis
- **Article Management**: Import new articles or select from previously saved content
- **Interactive Text Selection**: Click and drag to select words or sentences for analysis
- **Dual Query Modes**: 
  - AI Query: DeepSeek API-powered translations and grammar analysis
  - Manual Mark: User-driven annotations with editable notes
- **Visual Highlighting**: Advanced highlighting system with intelligent range merging and visual hierarchy
- **Text-to-Speech**: Built-in pronunciation assistance
- **User Notes Management**: Manual notes with newline preservation and editing capabilities

### Session Persistence
- Articles and annotations saved to Supabase database
- Session state restored across browser refreshes
- Manual notes with auto-save functionality
- Query history maintained per article

### Smart UI Features
- Split-panel layout: article on left, query results on right
- Context-sensitive selection tooltip
- **Bidirectional Navigation**: Click query cards to jump to article highlights, click article highlights to jump to query cards
- Collision detection prevents duplicate queries on same text
- **Advanced Highlighting System**: Intelligent range merging with visual hierarchy (background colors for words, bold text for sentences)

## Technical Architecture

### Technology Stack
- **Frontend**: Next.js 15 (App Router), TypeScript, Tailwind CSS
- **State Management**: Zustand store for client-side state
- **Backend**: Next.js API routes with Supabase (PostgreSQL)
- **AI Integration**: DeepSeek API for translations and analysis
- **Browser APIs**: DOM Selection API, Tree Walker API, Web Speech API

### File Structure
```
src/app/language-reading/
├── components/
│   ├── ArticleInput.tsx      # Article input and selection
│   ├── ArticleList.tsx       # Previous articles dropdown  
│   ├── QueryCards.tsx        # Query results display with bidirectional navigation
│   ├── ReadingView.tsx       # Main reading interface with advanced highlighting
│   ├── AIDialog.tsx          # Custom AI assistant popup dialog **NEW 2025**
│   ├── Tooltip.tsx           # Interactive tooltip for AI notes **NEW 2025**
│   ├── AnimatedButton.tsx    # Reusable button component
│   └── ThinkingAnimation.tsx # Loading animation component
├── store/
│   └── useLanguageReadingStore.ts # Zustand state management with enhanced features
├── config/
│   └── uiText.ts            # Multilingual UI text configuration
├── utils/
│   └── tts.ts               # Text-to-speech utilities
└── page.tsx                  # Main page component

src/app/api/language-reading/
├── articles/                 # Article CRUD operations
├── query-word/              # AI word analysis
├── query-sentence/          # AI sentence analysis  
├── mark-word/               # Manual word marking
├── mark-sentence/           # Manual sentence marking
├── queries/                 # Query retrieval/deletion
├── update-notes/            # Update manual notes
├── save-ai-notes/           # Save AI assistant responses **NEW 2025**
├── ask-ai/                  # Custom AI assistant endpoint **NEW 2025**
└── review-test/             # Test mode functionality
```

### Database Schema (Updated 2025)

#### english_reading_articles
- id (SERIAL PRIMARY KEY)
- content (TEXT NOT NULL) - Article text content
- title (VARCHAR(255)) - Optional article title
- language (VARCHAR(10) DEFAULT 'english') - Language identifier
- created_at, updated_at (TIMESTAMP)
- CONSTRAINT: language IN ('english', 'french')

#### english_reading_word_queries
- id (SERIAL PRIMARY KEY)
- article_id (INTEGER REFERENCES articles)
- word_text (TEXT NOT NULL) - Selected word/phrase
- definition (TEXT) - AI-generated definition
- examples (TEXT[]) - Usage examples array
- start_offset, end_offset (INTEGER) - Text position markers
- query_type (VARCHAR(20)) - 'ai_query' or 'manual_mark'
- user_notes (TEXT) - Editable user annotations
- ai_notes (TEXT) - AI assistant custom responses **NEW 2025**
- language (VARCHAR(10) DEFAULT 'english') - Language identifier **NEW 2025**
- part_of_speech (VARCHAR(50)) - Grammatical category
- root_form (TEXT) - Base form of the word
- example_translation (TEXT) - Translation of examples
- gender (VARCHAR(20)) - For French: masculin/féminin **NEW 2025**
- conjugation_info (TEXT) - Verb conjugation details **NEW 2025**
- created_at (TIMESTAMP)
- CONSTRAINT: language IN ('english', 'french')

#### english_reading_sentence_queries
- id (SERIAL PRIMARY KEY)
- article_id (INTEGER REFERENCES articles)
- sentence_text (TEXT NOT NULL)
- translation (TEXT) - AI translation
- analysis (TEXT) - Grammar/context analysis
- start_offset, end_offset (INTEGER) - Text position markers
- query_type (VARCHAR(20)) - 'ai_query' or 'manual_mark'
- user_notes (TEXT) - Editable user annotations
- ai_notes (TEXT) - AI assistant custom responses **NEW 2025**
- language (VARCHAR(10) DEFAULT 'english') - Language identifier **NEW 2025**
- created_at (TIMESTAMP)
- CONSTRAINT: language IN ('english', 'french')

#### Database Architecture Notes
- **Multi-language Support**: Both English and French content use the same tables, differentiated by the 'language' column
- **AI Assistant Integration**: Custom ai_notes field stores user-customized AI responses
- **French-specific Fields**: Gender and conjugation_info for French language learning
- **Performance Indexes**: 
  - idx_articles_language ON english_reading_articles(language)
  - idx_word_queries_language ON english_reading_word_queries(language)
  - idx_sentence_queries_language ON english_reading_sentence_queries(language)
  - idx_english_reading_word_queries_ai_notes ON english_reading_word_queries(ai_notes) WHERE ai_notes IS NOT NULL
  - idx_english_reading_sentence_queries_ai_notes ON english_reading_sentence_queries(ai_notes) WHERE ai_notes IS NOT NULL

### State Management (useReadingStore.ts)

#### Store State
```typescript
interface ReadingState {
  currentArticle: Article | null
  wordQueries: WordQuery[]
  sentenceQueries: SentenceQuery[]
  highlightRanges: HighlightRange[]
  isLoading: boolean
}
```

#### Key Methods
- `setCurrentArticle()` - Load article and fetch existing queries
- `addWordQuery()` / `addSentenceQuery()` - Add new analysis results
- `updateHighlights()` - Generate highlight ranges from query positions
- `updateUserNotes()` - Edit manual annotations
- `clearQueries()` - Reset session state

### API Implementation Details

#### AI Integration Pattern
- **DeepSeek API**: Structured JSON prompts for consistent responses
- **Error Handling**: Graceful fallback with default responses
- **Bilingual Support**: English-to-Chinese translation focus
- **Request Format**:
  ```typescript
  {
    model: "deepseek-chat",
    messages: [{ role: "user", content: structuredPrompt }],
    response_format: { type: "json_object" }
  }
  ```

#### Text Selection Algorithm
The module implements sophisticated DOM-to-text mapping:

1. **Tree Walker Traversal**: Calculate accurate text offsets
2. **Fuzzy Text Matching**: Handle selection edge cases
3. **Search Window Algorithm**: Map DOM selections to original text
4. **Fallback Mechanisms**: Robust handling of selection failures

```typescript
// Simplified offset calculation logic
function calculateTextOffset(container: Element, textContent: string): number {
  const walker = document.createTreeWalker(
    container,
    NodeFilter.SHOW_TEXT,
    null,
    false
  )
  
  let offset = 0
  let node: Text | null
  
  while (node = walker.nextNode() as Text) {
    // Calculate cumulative offset...
  }
  
  return offset
}
```

### User Interaction Flow

#### Reading Session Workflow
1. **Article Input/Selection**:
   - User pastes new content or selects previous article
   - System saves to database with unique ID
   - Session ID stored in localStorage

2. **Text Analysis**:
   - User selects text (words or sentences)
   - Context tooltip appears with query options
   - AI queries trigger DeepSeek API calls
   - Manual marks create editable placeholders

3. **Visual Feedback**:
   - Selected text highlighted with color coding
   - Query results display as cards in right panel
   - Bidirectional linking between highlights and cards

4. **Session Persistence**:
   - All annotations linked to article ID in database
   - State restoration on page reload
   - Manual notes with auto-save on blur

### Performance Optimizations

#### Efficient Rendering
- **Zustand Selective Subscriptions**: Minimize unnecessary re-renders
- **Direct DOM Manipulation**: HTML injection for highlights avoids React costs
- **Lazy Card Loading**: Query results render on-demand

#### State Management Efficiency
- **Optimistic Updates**: UI updates immediately, sync in background
- **Collision Detection**: Prevent duplicate queries on overlapping text
- **Smart Re-highlighting**: Only update affected text regions

### Unique Implementation Features

#### Advanced Text Processing
- **Context-Aware Selection**: Automatic word vs sentence detection
- **Intelligent Offset Mapping**: Handle complex DOM text selection scenarios
- **Multi-layer Highlighting**: Support overlapping word and sentence highlights

#### AI Integration Innovation
- **Structured Prompting**: Consistent JSON response format
- **Bilingual Analysis**: Specialized English learning for Chinese speakers  
- **Contextual Examples**: Generate relevant usage examples

#### UX Enhancements
- **Smart Tooltip Positioning**: Context-sensitive UI based on selection
- **Smooth Animations**: CSS transitions for highlight effects
- **Accessibility Support**: Keyboard navigation and screen reader compatibility
- **Mobile Responsive**: Touch-friendly selection and interaction

## Development Notes

### Environment Requirements
- DeepSeek API key for AI functionality
- Supabase project with reading schema initialized
- Next.js 15+ for App Router support

### Extension Opportunities
- Multi-language support beyond English-Chinese
- Advanced grammar analysis with detailed breakdowns
- Reading progress tracking and statistics
- Export functionality for study materials
- Integration with spaced repetition systems

### Performance Considerations
- Consider virtualization for very long articles
- Implement query result caching for repeated analyses
- Add debouncing for rapid text selections
- Optimize highlight rendering for large query sets

## 2025 Updates - AI Assistant Enhancement

### New AI Assistant Features
- **Custom User Prompts**: Users can now input their own questions instead of predefined templates
- **Persistent AI Notes**: AI responses are saved to database and displayed as visual indicators on cards
- **Interactive Tooltips**: Hover over saved AI notes indicators to view content with markdown formatting
- **Smart UI Positioning**: Tooltips intelligently position left/right based on card location to avoid viewport overflow
- **Enhanced UX Flow**: After saving notes, dialog auto-closes and smoothly scrolls to the corresponding card with highlight animation

### Technical Implementation Details

#### AI Dialog Component (`AIDialog.tsx`)
- **70/30 Layout Split**: User input area (30%) and AI response area (70%) for optimal reading experience
- **ReactMarkdown Integration**: Full markdown rendering with custom purple-themed styling
- **Save Status Feedback**: Visual indicators (Saving.../Saved!/Failed) with appropriate color coding
- **Footer Button Layout**: Save to Notes and Close buttons positioned together for intuitive workflow
- **Auto-scroll Feature**: Automatically navigates to saved card location after successful save operation

#### Tooltip System (`Tooltip.tsx`)
- **Position-aware Rendering**: Dynamic positioning (top/left/right) based on trigger element location
- **Hover Delay Protection**: 300ms delay prevents accidental hiding when moving mouse to tooltip content
- **Responsive Sizing**: 384px width with 90vw max-width for mobile compatibility
- **Memory Leak Prevention**: Proper cleanup of timeout handlers using useEffect

#### Database Integration
- **Dual Language Support**: Single table architecture handles both English and French content via language column
- **AI Notes Persistence**: New ai_notes TEXT columns in both word and sentence query tables
- **Optimized Indexing**: Performance indexes on ai_notes columns for efficient retrieval
- **Real-time Updates**: Immediate UI refresh after successful save operations

### API Enhancements

#### Save AI Notes Endpoint (`/api/language-reading/save-ai-notes/route.ts`)
- **Language Detection**: Automatic table selection based on language parameter
- **Error Handling**: Comprehensive error reporting for debugging and user feedback
- **Database Validation**: Strict validation of required fields and data types
- **Logging Integration**: Detailed console logging for development and production debugging

### User Experience Improvements
- **Visual Feedback**: Purple circular indicators show which cards have saved AI notes
- **Seamless Workflow**: Users can continue conversations while having persistent note-taking capability
- **Accessibility**: All new components follow accessibility best practices with proper ARIA labels
- **Performance**: Optimized rendering with selective re-renders and efficient state management

## 2025.07 Major Updates - Advanced Highlighting & Navigation System

### Enhanced Highlighting Architecture

#### **Intelligent Range Merging System**
- **Overlap Detection**: Automatically detects and merges overlapping word and sentence highlights
- **Visual Hierarchy**: Words use background colors (purple), sentences use bold text styling
- **Combined Styling**: Overlapped regions get both background color and bold text for clear distinction
- **Performance Optimization**: Efficient range merging algorithm reduces DOM complexity

#### **Bidirectional Navigation Implementation**
```typescript
// Data mapping system using DOM attributes
<span data-query-ids='[76,82,95]' class="...">highlighted text</span>
```

**Technical Architecture:**
- **Query ID Mapping**: Each highlighted span contains `data-query-ids` attribute with associated query IDs
- **Card → Article**: Direct ID lookup using `queryIds.includes(query.id)` for precise targeting
- **Article → Card**: Parse clicked span's query IDs and navigate to corresponding cards
- **Multi-Query Support**: Single span can contain multiple queries (word + sentence overlaps)

### User Interaction Enhancements

#### **Manual Notes Management**
- **Newline Preservation**: User notes maintain formatting with `whitespace-pre-wrap` CSS
- **Inline Editing**: Click any saved note to enter edit mode with textarea
- **Auto-save on Blur**: Notes automatically save when user clicks away
- **Visual Feedback**: Clear distinction between empty and filled note states

#### **Advanced Text Selection & Highlighting**
- **Smart Text Processing**: Sophisticated DOM-to-text offset mapping handles complex selections
- **Collision Detection**: Prevents duplicate queries on same text ranges
- **Context-Aware Selection**: Intelligent word vs sentence detection
- **Visual Feedback**: Smooth animations for scroll-to-highlight actions

### Technical Implementation Details

#### **Highlighting System (`ReadingView.tsx`)**
```typescript
// Simplified highlighting approach for sentences
const hasSentence = range.types.includes('sentence')
const className = hasSentence ? 'font-bold cursor-pointer' : 'bg-purple-100/20'
```

**Key Features:**
- **Range Merging**: Overlapping highlights merged into single DOM elements
- **Type Classification**: Distinguishes between word, sentence, and combined highlights
- **Event Handling**: Click events for bidirectional navigation
- **Performance**: Direct HTML generation for optimal rendering speed

#### **Navigation System (`QueryCards.tsx`)**
```typescript
// Precise ID-based targeting
const queryIds = JSON.parse(element.dataset.queryIds)
if (queryIds.includes(query.id)) {
  element.scrollIntoView({ behavior: 'smooth', block: 'center' })
}
```

**Advantages:**
- **Reliability**: No text-matching issues or ambiguity
- **Performance**: O(1) lookup complexity
- **Maintainability**: Simple, predictable logic
- **Scalability**: Handles unlimited overlapping queries

### Database Architecture Evolution

#### **Multi-language Support Enhancement**
- **Unified Tables**: Single table architecture supports both English and French
- **Language Column**: `language` field distinguishes content types
- **Index Optimization**: Performance indexes on language-specific queries
- **Backwards Compatibility**: Existing data seamlessly works with new architecture

### Performance & UX Optimizations

#### **Rendering Optimizations**
- **HTML Generation**: Direct string manipulation for highlight rendering
- **Selective Updates**: Only re-render affected components
- **Memory Management**: Proper event listener cleanup
- **Animation Performance**: Hardware-accelerated transitions

#### **User Interaction Flow**
1. **Text Selection** → Context tooltip with query options
2. **Query Creation** → Immediate visual feedback and card generation  
3. **Highlight Rendering** → Merged ranges with appropriate styling
4. **Bidirectional Navigation** → Seamless jumping between article and cards
5. **Note Management** → Inline editing with formatting preservation

The English Reading module now represents a mature, production-ready language learning platform combining sophisticated text processing, intelligent AI assistance, and intuitive user interactions. The 2025.07 updates establish a robust foundation for advanced reading comprehension tools with seamless multilingual support and professional-grade user experience design.