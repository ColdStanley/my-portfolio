Lueur

lueur_articles

id	uuid	主键（自动生成）
title	text	文章标题
paragraphs	json	字符串数组：每段正文作为一项，如 ["段1", "段2", "段3"]
highlight_data	json	对象数组：每个对象包含 phrase 和 note
image_url	text	背景图路径或 URL
created_at	timestamp	自动生成时间戳（可选）



步骤	用户操作	显示内容
1️⃣	页面加载	显示背景图（默认图）
2️⃣	点击空白处（第1次）	显示标题
3️⃣	点击空白处（第2次）	显示第一段段落文本
4️⃣	点击空白处（第3次）	显示第一段中的第一个高亮词
5️⃣	点击高亮词	显示解释 Tooltip
6️⃣	鼠标移出高亮词	隐藏解释 Tooltip
7️⃣	再点击空白处	显示第二段 / 第二个高亮词……直到文章展示完毕

✅ 核心功能需求
1. 背景图显示
每篇文章记录包含一个 image_url 字段；

页面加载时使用该图片作为背景；

背景图支持模糊 + 遮罩层叠处理（黑色透明覆盖 + blur）。

2. 段落逐步显示
文章内容 paragraphs 为 \n 分隔的多段落文本；

初始状态仅显示背景；

第一次点击：显示标题；

第二次点击：显示第一段；

第三次点击：显示第一段的第一个高亮词；

每次点击：逐步展示下一个词 → 下一段 → 重复此逻辑；

点击空白区域触发推进逻辑。

3. 高亮词解析与解释显示
高亮词由 highlight_data 字段提供，是一个 JSON 数组；

每个元素格式为：

ts
Copy
Edit
{ word: string, note: string }
每个段落中匹配的词会依次被高亮；

高亮样式统一（背景色、圆角、hover 动效）；

鼠标悬停（桌面端）或点击（移动端）时：

显示该词的解释（使用 Tooltip / Sheet）。

4. 用户手动高亮词
在未进入该高亮词时，用户可以手动点击段落中的词，强制高亮；

点击后立即高亮，并具备解释显示功能；

多次点击不同词可同时高亮多个。

5. 一键高亮按钮
页面右下角有一个按钮：

初始状态：显示全部高亮词汇；

点击后：全部词立即高亮；

再次点击：清除全部高亮状态；

高亮状态下的词仍支持悬停 / 点击显示解释。

src/
└── app/
    └── lueur/
        ├── components/
        │   ├── ExplanationPanel.tsx.tsx          # 词汇解释面板
        │   ├── LueurStageRenderer.tsx            # 主渲染器（注入游戏组件）
        │   ├── LueurTextSegment.tsx              # 文本高亮段落渲染
        │   ├── Tooltip.tsx                        # Tooltip 显示解释
        │   ├── GameControllerButton.tsx          # ✅ 新增：右下角按钮
        │   ├── MatchingGameEngine.tsx            # ✅ 新增：游戏主逻辑
        │   ├── FloatingWordCard.tsx              # ✅ 新增：左侧词卡片
        │   └── FloatingNoteCard.tsx              # ✅ 新增：右侧释义卡片
        │
        ├── hooks/
        │   ├── useHighlightManager.ts            # 高亮状态管理
        │   ├── useLueurData.ts                   # 提供 highlightData 等核心数据
        │   ├── useRevealControl.ts               # 控制段落 reveal 逻辑
        │   └── useMatchingGame.ts                # ✅ 新增（可选）：游戏状态逻辑 hook
        │
        ├── lib/
        │   └── supabase.ts                        # Supabase 客户端封装
        │
        ├── utils/
        │   └── parseHighlightData.ts             # 高亮词解释数据解析工具
        │
        ├── page.tsx                              # 页面入口
        └── types.ts                              # 类型定义（HighlightItem 等）



请根据以下法语文章内容，提取 4 个高频关键词组，每个关键词组必须是文章中实际出现过的词组，并提供中法双语解释说明。输出格式为 JSON 字符串，结构如下：
[
  {
    "word": "词组",
    "note": "中文解释句 + 法语例句"
  }
]
注意事项：

“word” 是文章中实际出现过的完整词组（如名词短语、地名、专业术语）；

“note” 包含简洁的中文解释，和一条相关法语例句（用原文或合理扩展）；

输出必须是合法 JSON，不能加注释、换行符或 Markdown 标记；

所有词组请确保来自文章内容或紧密相关。


✅ Lueur 配对游戏功能需求（最终确认版）
🎮 游戏按钮（右下角）
状态	行为
Game（初始）	点击后进入游戏状态，仅加载当前页面右列卡片中显示的词义对，开始飘动
Pause（游戏中）	点击后退出游戏状态，立即清空所有正在飘动的词语和释义卡片

🧠 配对游戏核心逻辑
项目	描述
📦 数据来源	仅使用当前右列可视区域中的高亮词解释卡片（highlight_data）
🌀 飘动形式	每对词-释义拆成两张卡片：
词从左向右漂浮，释义从右向左漂浮
🔀 匹配模式	支持全排列匹配：词 A 可配任意释义 B，只要是对应的一对
🔄 点击顺序	不限顺序，可先词后义或反之
✅ 成功配对	两张卡片立即淡出 + 消失 + 动效提示
❌ 失败配对	两张卡片抖动，继续保留在屏幕上
🔁 多次选择	若已选择词 A，再点词 B → 自动切换为 B
🚫 不支持取消	误选词或释义 → 直接点击其他项切换，无需取消按钮

📌 重点强调
✅ 仅使用右侧已渲染的卡片
✅ 不查询数据库，不加载未显示数据
✅ 不添加计时、积分等机制
✅ 一次性加载所有显示项为飘动卡片对


分类	问题描述	是否影响功能	推荐修复
🟥	缺少加载状态，误提示无数据	✅ 是	✅ 是
🟥	includes 匹配高亮词有误匹配风险	✅ 是	✅ 是
🟧	Tooltip 定位未校验边界	⛔ 部分设备异常	✅ 是
🟧	推进逻辑嵌套复杂	❌ 暂不影响	☑️ 可优化
🟨	展示完成后点击无提示	❌ 体验问题	☑️ 可优化
🟨	高亮样式未统一封装	❌ 非关键	☑️ 建议封装
🟨	Sheet 缺关闭机制	❌ 移动端体验	☑️ 建议修复


🧱 第 1 步：数据结构与类型定义
📄 文件：types.ts

定义 LueurItem（从 Supabase 读取的一行记录）

定义 HighlightWord（词 + 解释）

定义 RevealStage（阶段控制器可选）

✅ 目的：确保类型安全、组件传参规范

🧠 第 2 步：核心控制器组件
📄 文件：LueurStageRenderer.tsx

加载 props 中的数据

使用 stage 控制 reveal 顺序（点击空白区域推进）

维护 manualWords, forceHighlightAll 两个状态

加一个按钮控制“显示全部高亮词汇 / 清除”

✅ 目的：所有显示逻辑的中心组件

🧾 第 3 步：段落 + 高亮展示模块
📄 文件：LueurTextSegment.tsx

接收当前段落文本（string）和高亮列表

控制哪些词高亮（已 reveal、手动点击、一键高亮）

包裹高亮词为 <mark data-note="xxx">词</mark>

✅ 目的：精确控制高亮逻辑、词级互动支持

💬 第 4 步：Tooltip 漂浮解释
📄 文件：Tooltip.tsx

hover 或点击某个 <mark>，显示解释浮层

支持 tailwind 简易布局 + CSS hover

也可以用简单 Portal 实现浮层弹出

✅ 目的：让高亮词解释清晰浮现

🖼️ 第 5 步：页面结构与默认背景图
📄 文件：page.tsx + public/fallback.jpg

使用 supabase.from('lueur').select('*') 获取数据

页面中调用 <LueurStageRenderer item={data[0]} />

加入默认背景图展示（若 image_url 无效）

✅ 目的：整合数据、调起核心渲染器

🧪 第 6 步：功能联调 + 演示验证
测试：

点击空白 → 内容依次展开

点击任何词 → 高亮 & 悬停解释

一键高亮按钮 → 全词高亮 / 清除

验证 hover 状态下的 Tooltip 是否跟随鼠标

✅ 目的：交互闭环、自测清晰

📦 第 7 步：后续优化（非 MVP）
多条数据列表展示（若未来支持分页）

高亮词动态顺序自动控制（按段/词递进）

动画渐显（Framer Motion 可选）

手机端适配（点击替代 hover）